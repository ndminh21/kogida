var adjustSize, chapterId, constant, exerciseEditor, gradeSubjectId, input_opener, parameter, sample_formula_row;

parameter = [];

constant = [];

gradeSubjectId = null;

chapterId = null;

exerciseEditor = null;

$("#exercise-input-wizard").steps({
  headerTag: "h3",
  bodyTag: "section",
  stepsOrientation: "vertical",
  labels: {
    finish: "Kết thúc",
    next: "Tiếp theo",
    previous: "Trước"
  },
  onStepChanging: function(event, currentIndex, newIndex) {
    var anglemode, formulaRow, formulaRows, i, index, len, param, tex;
    if (currentIndex === 0) {
      gradeSubjectId = Number($("#input-gradeSubjectId option:selected").val());
      chapterId = Number($("#input-chapterId option:selected").val());
      if (gradeSubjectId === -1 || chapterId === -1) {
        bootbox.alert("Chưa chọn thông tin về môn/ khối hoặc chương!");
        return false;
      }
    } else if (currentIndex === 1) {
      formulaRows = $(" .formula-contaniner").find(".input-formula-row");
      constant = [];
      parameter = [];
      for (index = i = 0, len = formulaRows.length; i < len; index = ++i) {
        formulaRow = formulaRows[index];
        tex = formulaRows.eq(index).find(".input-formula-bare-tex").eq(0).text();
        anglemode = formulaRows.eq(index).find(".input-formula-anglemode").eq(0).text();
        param = formulaRows.eq(index).find(".input-param").eq(0).prop("checked");
        if (param) {
          if (tex === "") {
            bootbox.alert("Tham số đầu vào không được phép rỗng!");
            return false;
          } else {
            parameter.push({
              tex: tex,
              anglemode: anglemode
            });
          }
        } else {
          if (tex !== "") {
            constant.push({
              tex: tex,
              anglemode: anglemode
            });
          }
        }
      }
    }
    return true;
  },
  onFinished: function(event, currentIndex) {
    var content;
    content = exerciseEditor.getData();
    return $.get("/luu-bai-moi", {
      chapterId: chapterId,
      content: content,
      constant: JSON.stringify(constant),
      parameter: JSON.stringify(parameter),
      level: $("#input-level option:selected").val()
    }, function(result) {
      return window.location.href = "/them-bai-tap-moi";
    });
  }
});

$(".add-param").click(function() {
  bootbox.prompt({
    title: "Chọn 1 tham số đầu vào để hiển thị",
    inputType: "checkbox",
    inputOptions: parameter.map(function(x) {
      return {
        text: "\\(" + x.tex + "\\)",
        value: "" + x.tex
      };
    }),
    closeButton: false,
    callback: function(result) {
      var parameterToInsert;
      if (result.length > 0) {
        parameterToInsert = result[0];
        exerciseEditor.insertText("\\(" + result[0] + "\\)");
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }
    }
  });
  return MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
});

$("select").select2({
  language: "vi"
});

$("#input-gradeSubjectId").on("change", function(event) {
  var defaultOption, newGradeSubjectId;
  newGradeSubjectId = Number($(this).find("option:selected").val());
  defaultOption = new Option("Chọn chương học tương ứng của bài tập", "1", true, true);
  if (newGradeSubjectId === -1) {
    $("#input-chapterId").empty().trigger("change");
    return $("#input-chapterId").append(defaultOption).trigger("change");
  } else {
    return $.post("/lay-chuong-theo-mon-khoi", {
      gradeSubjectId: newGradeSubjectId
    }, function(chapterList) {
      var chapter, i, len, newOption, results;
      $("#input-chapterId").empty().trigger("change");
      $("#input-chapterId").append(defaultOption).trigger("change");
      results = [];
      for (i = 0, len = chapterList.length; i < len; i++) {
        chapter = chapterList[i];
        newOption = new Option(chapter.ChapterName, chapter.ChapterId, false, false);
        results.push($("#input-chapterId").append(newOption).trigger("change"));
      }
      return results;
    });
  }
});

$(".input-param").iCheck({
  checkboxClass: "icheckbox_flat-blue"
});

input_opener = null;

sample_formula_row = null;

$(document).ready(function() {
  CKEDITOR.replace('exercise-input', {
    allowedContent: true
  });
  return exerciseEditor = CKEDITOR.instances["exercise-input"];
});

$(".add-new-formula").click(function() {
  $(".formula-contaniner").append('<div class="row input-formula-row"> <div class="col-md-9 input-formula-box"> <div class="input-formula"> <div class="input-formula-tex">\\(\\)</div> <div class="input-formula-bare-tex hidden"></div> <div class="input-formula-anglemode hidden"></div> </div> </div> <div class="col-md-3 input-param-box"> <label> <input class="input-param" type="checkbox"><span style="padding-left: 3px;">Tham số đầu vào</span> </label> </div> </div>');
  MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
  $(".input-param").iCheck({
    checkboxClass: "icheckbox_flat-blue"
  });
  return $(".input-formula").click(function() {
    var editor;
    input_opener = $(this);
    return editor = window.open("/may-tinh-kogida?editor=true&solver=false", "popupWindow", "width=600, height=400, scrollbars=yes");
  });
});

$(".input-formula").click(function() {
  var editor;
  input_opener = $(this);
  return editor = window.open("/may-tinh-kogida?editor=true&solver=false", "popupWindow", "width=600, height=400, scrollbars=yes");
});

$(".open-editor").click(function() {
  var editor, editorName;
  editorName = $(this).data("editor");
  if (editorName === "solution") {
    return editor = window.open("/may-tinh-kogida?editor=true&solver=false&ck=solution-input", "popupWindow", "width=600, height=400, scrollbars=yes");
  } else if (editorName === "exercise") {
    return editor = window.open("/may-tinh-kogida?editor=true&solver=false&ck=exercise-input", "popupWindow", "width=600, height=400, scrollbars=yes");
  }
});

adjustSize = function() {
  var height, texBox;
  texBox = input_opener.find("div").eq(0);
  height = texBox.height();
  return input_opener.css("cssText", "height: " + (height + 20) + "px !important;");
};

window.setMathFormula = function(tex, anglemode) {
  input_opener.find("div").eq(0).text("\\(" + tex + "\\)");
  input_opener.find("div").eq(1).text(tex);
  input_opener.find("div").eq(2).text(anglemode);
  MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
  return adjustSize();
};

window.insertMathFormula = function(ckEditorName, tex) {
  return CKEDITOR.instances[ckEditorName].insertText("\\(" + tex + "\\)");
};
